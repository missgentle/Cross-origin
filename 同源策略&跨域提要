## 第一部分：浏览器的同源策略

同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。浏览器同源策略，不阻止发出请求，只是请求的返回结果被浏览器阻止了，用户不能拿到请求的返回值。

1. 同源的定义
如果两个页面的协议，端口（如果有指定）和主机都相同，则两个页面具有相同的源。（我们经常看的网址没有，是因为默认端口80可以省略）

<img src='co1.png'>
<img src='co2.png'>

2. 源的更改
页面可能会因某些限制而改变他的源。脚本可以将 document.domain 的值设置为其当前域或其当前域的父域。如果将其设置为其当前域的父域，则这个较短的父域将用于后续源检查。假设 http://store.company.com/dir/other.html 文档中的一个脚本执行以下语句：
document.domain = "company.com";
这条语句执行之后，页面将会成功地通过对 http://company.com/dir/page.html 的同源检测（假设http://company.com/dir/page.html 将其 document.domain 设置为“company.com”，以表明它希望允许这样做 - 更多有关信息，请参阅 document.domain ）。然而，company.com 不能设置 document.domain 为 othercompany.com，因为它不是 company.com 的父域。
端口号是由浏览器另行检查的。任何对document.domain的赋值操作，包括 document.domain = document.domain 都会导致端口号被重写为 null 。因此 company.com:8080 不能仅通过设置 document.domain = "company.com" 来与company.com 通信。必须在他们双方中都进行赋值，以确保端口号都为 null。
3. 跨源网络访问
同源策略控制了不同源之间的交互。这些交互通常分为三类：
•通常允许跨域写操作（Cross-origin writes）。特定少数的HTTP请求需要添加 preflight。
•通常允许跨域资源嵌入（Cross-origin embedding）。
•通常不允许跨域读操作（Cross-origin reads）。但常可以通过内嵌资源来巧妙的进行读取访问。

以下是可能嵌入跨源的资源的一些示例：
•<script src="..."></script> 标签嵌入跨域脚本。语法错误信息只能在同源脚本中捕捉到。
•<link rel="stylesheet" href="..."> 标签嵌入CSS。由于CSS的松散的语法规则，CSS的跨域需要一个设置正确的Content-Type 消息头。不同浏览器有不同的限制。
•<img>嵌入图片。支持的图片格式包括PNG,JPEG,GIF,BMP,SVG,...
•<video> 和 <audio>嵌入多媒体资源。
•<object>, <embed> 和 <applet> 的插件。
•@font-face 引入的字体。一些浏览器允许跨域字体（ cross-origin fonts），一些需要同源字体（same-origin fonts）。
•<frame> 和 <iframe> 载入的任何资源。站点可以使用X-Frame-Options消息头来阻止这种形式的跨域交互。

总结：iframe、script、img、video、object、embed、link标签允许垮域引用资源
ajax、cookie、localstorage等被限制(（1） Cookie、LocalStorage 和 IndexDB 无法读取。（2） DOM 无法获得。（3） AJAX 请求不能发送。)



## 第二部分：跨域/跨源

#### 一 前后台跨域

1.CORS (Cross-Origin Resource Sharing)
跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源。
另外，规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 GET 以外的 HTTP 请求，或者搭配某些 MIME 类型的 POST 请求），
浏览器必须首先使用 OPTIONS 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。服务器确认允许之后，才发起实际的 HTTP 请求。
在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括 Cookies 和 HTTP 认证相关数据）。

简而言之, 浏览器不再一味禁止跨域访问, 而是检查目的站点的响应头域, 进而判断是否允许当前站点访问. 通常, 服务器使用以下的这些响应头域用来通知浏览器:
Response headers[edit]
Access-Control-Allow-Origin
Access-Control-Allow-Credentials
Access-Control-Allow-Methods
Access-Control-Allow-Headers
Access-Control-Expose-Headers
Access-Control-Max-Age

作者：路易斯
链接：https://juejin.im/post/58f816198d6d81005874fd97
来源：掘金
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

普通跨域请求：只服务端设置Access-Control-Allow-Origin即可，前端无须设置，若要带cookie请求：前后端都需要设置。由于同源策略的限制，所读取的cookie为跨域请求接口所在域的cookie，而非当前页。

优缺点：目前，所有浏览器都支持该功能(IE8+：IE8/9需要使用XDomainRequest对象来支持CORS）)，CORS也已经成为主流的跨域解决方案。整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。CORS与JSONP的使用目的相同，但是比JSONP更强大。JSONP只支持GET请求，CORS支持所有类型的HTTP请求。JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。

简单请求

某些请求不会触发 CORS 预检请求。本文称这样的请求为“简单请求”，请注意，该术语并不属于 Fetch （其中定义了 CORS）规范。若请求满足所有下述条件，则该请求可视为“简单请求”：
•使用下列方法之一：
◦GET
◦HEAD
◦POST

•Fetch 规范定义了对 CORS 安全的首部字段集合，不得人为设置该集合之外的其他首部字段。该集合为：
◦Accept
◦Accept-Language
◦Content-Language
◦Content-Type （需要注意额外的限制）
◦DPR
◦Downlink
◦Save-Data
◦Viewport-Width
◦Width

•Content-Type 的值仅限于下列三者之一： 
◦text/plain
◦multipart/form-data
◦application/x-www-form-urlencoded

•请求中的任意XMLHttpRequestUpload 对象均没有注册任何事件监听器；XMLHttpRequestUpload 对象可以使用 XMLHttpRequest.upload 属性访问。
•请求中没有使用 ReadableStream 对象。


* CORS 解决方案相对于JSONP 更加灵活，而且支持POST请求，是跨域的根源性解决方案。
      兼容性。CORS是W3C中一项较新的方案，所以部分浏览器还没有对其进行支持或者完美支持，详情可移至 http://www.w3.org/TR/cors/ 
      安全问题。CORS提供了一种跨域请求方案，但没有为安全访问提供足够的保障机制，如果你需要信息的绝对安全，不要依赖CORS当中的权限制度，应当使用更多其它的措施来保障，比如OAuth2。


2.Jsonp
通常为了减轻web服务器的负载，我们把js、css，img等静态资源分离到另一台独立域名的服务器上，在html页面中再通过相应的标签从不同域名下加载静态资源，而被浏览器允许，基于此原理，我们可以通过动态创建script，再请求一个带参网址实现跨域通信。jsonp正是利用这个特性来实现的。 
原理：
1、JS 跨域请求资源会被限制。但是在页面中，script 标签跨域时，却是没有限制的（frame，img同理凡是拥有”src”这个属性的标签都拥有跨域的能力，比如<script>、<img>、<iframe>所以在远程服务器上设法把数据装进js格式的文件里，供客户端调用和进一步处理即实现跨域）。 
2、我们通过，script的src属性，请求服务器，并通过参数（如：？callback=foo，foo为本地一个执行的方法）告诉服务器返回指定格式的JS脚本，并将数据封装在此脚本中。 
3、服务器再配合客户端返回一段脚本 （如：* foo({“id”: 123, “name” : 张三, “age”: 17});* ），其实返回的就是 一个客户端本地的一个    可执行的方法的方法名,  并将要返回的 数据封装在了参数 里。 
4、请求到资源后，本地就会执行此方法，通过对参数的处理，也就获取到了我们所要的数据。

1、一个众所周知的问题，Ajax直接请求普通文件存在跨域无权限访问的问题，甭管你是静态页面、动态网页、web服务、WCF，只要是跨域请求，一律不准；
2、不过我们又发现，Web页面上调用js文件时则不受是否跨域的影响（不仅如此，我们还发现凡是拥有”src”这个属性的标签都拥有跨域的能力，比如<script>、<img>、<iframe>）；
3、于是可以判断，当前阶段如果想通过纯web端（ActiveX控件、服务端代理、属于未来的HTML5之Websocket等方式不算）跨域访问数据就只有一种可能，那就是在远程服务器上设法把数据装进js格式的文件里，供客户端调用和进一步处理；
4、恰巧我们已经知道有一种叫做JSON的纯字符数据格式可以简洁的描述复杂数据，更妙的是JSON还被js原生支持，所以在客户端几乎可以随心所欲的处理这种格式的数据；
5、这样子解决方案就呼之欲出了，web客户端通过与调用脚本一模一样的方式，来调用跨域服务器上动态生成的js格式文件（一般以JSON为后缀），显而易见，服务器之所以要动态生成JSON文件，目的就在于把客户端需要的数据装入进去。
6、客户端在对JSON文件调用成功之后，也就获得了自己所需的数据，剩下的就是按照自己需求进行处理和展现了，这种获取远程数据的方式看起来非常像AJAX，但其实并不一样。
7、为了便于客户端使用数据，逐渐形成了一种非正式传输协议，人们把它称作JSONP，该协议的一个要点就是允许用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。


注意：
服务器返回数据的格式 
是返回的JSONP格式，而不是单纯的JSON。返回的是一段JS脚本（客户端的一个可执行的方法，参数为JSON 格式的数据，是要返回的数据）。如果单纯的返回JSON数据，虽然客户端也能看数据，但是却会报错，不能执行请求成功的回调函数。服务器端需要将字符串拼接转义，键名 需要使用双引号string str = "foo({\"staus\":\"world\"})";

JSONP的局限性 
JSONP 方式，固然方便强大。但是他的局限性在于，它无法完成POST请求。即是我们将type改为post，在发送请求时，依然会是以Get的方式。

414 请求url过长错误码

https://kb.cnblogs.com/page/139725/

JSON(JavaScript Object Notation)和JSONP(JSON with Padding)虽然只有一个字母的差别，但其实他们根本不是一回事儿：JSON是一种数据交换格式，而JSONP是一种依靠开发人员的聪明才智创造出的一种非官方跨域数据交互协议。一个是描述信息的格式，一个是信息传递双方约定的方法。
优缺点：
1.	JSONP是服务器与客户端跨源通信的常用方法。最大特点就是简单适用，老式浏览器全部支持，服务器改造非常小。
2.	只能实现get一种请求、不安全 容易遭到xss攻击
在百度搜索时，会发现百度调用也是通过jsonp来实现的。
a）、JSON是一种基于文本的数据交换方式（不支持跨域），而JSONP是一种非官方跨域数据交互协议。
b）、jsonp是一种特殊的格式的格式，需要在数据前后中圆括号。如："(" + jsonp数据 +")"


为了便于客户端使用数据，逐渐形成了一种非正式传输协议。人们把它称作JSONP。该协议的一个要点就是允许用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。 jsonp的核心是动态添加 script标签 来调用服务器提供的js脚本。


3. Nginx反向代理
** 反向代理**（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。

反向代理是为服务端服务的，反向代理可以帮助服务器接收来自客户端的请求，帮助服务器做请求转发，负载均衡等。

反向代理对服务端是透明的，对我们是非透明的，即我们并不知道自己访问的是代理服务器，而服务器知道反向代理在为他服务。
nginx解决跨域的原理
例如：
前端server的域名为：fe.server.com
后端服务的域名为：dev.server.com
现在我在fe.server.com对dev.server.com发起请求一定会出现跨域。
现在我们只需要启动一个nginx服务器，将server_name设置为fe.server.com,然后设置相应的location以拦截前端需要跨域的请求，最后将请求代理回dev.server.com。如下面的配置：
server {
        listen  80;
        server_name  fe.server.com;
        location / {
                proxy_pass dev.server.com;
        }
}
这样可以完美绕过浏览器的同源策略：fe.server.com访问nginx的fe.server.com属于同源访问，而nginx对服务端转发的请求不会触发浏览器的同源策略。

代理跨域的原理：
同源策略是浏览器的安全策略，不是HTTP协议的一部分。服务器端调用HTTP接口只是使用HTTP协议，不会执行JS脚本，不需要同源策略，也就不存在跨越问题。

#### 二 非同源页面间跨域

1.Iframe
类似Jsonp，Iframe跨域也是建立在页面中，iframe 标签跨域没有限制的基础上。
通过两个非同源页面中分别嵌套一个同源页面，两个同源页面间通信再通过postMessage方法和message事件监听来实现非同源页面间的通信。
这里同源页面的通信方式又有很多，，，看这里：https://juejin.im/post/5ca04406f265da30ac219ccc

PostMessage跨域漏洞： https://sec.xiaomi.com/article/24

2.Websocket
通过建立websocket连接实现非同源页面间通信

三 不同跨域方法的比较
1.	document.domain+iframe
应用范围：这种办法只能解决主域相同而子域不同，且是iframe形式的跨域；
存在问题：安全性，当一个站点（b.a.com）被攻击后，另一个站点（c.a.com）会引起安全漏洞。
2.	JSONP
应用范围：因为是基于script标签，所有只能进行GET请求
存在问题：存在安全性问题，可被注入可执行的js代码（callback=alert(1)）, 对于这个问题，只能通过外界的字符串过滤来解决，如禁止callback中传入括号，使用正则去除左右括号，callback=callback.replace(/\(/g,"")，callback=callback.replace(/\)/g,"")
3.	CORS
给被访问方设置Access-Control-Allow-Origin，如在php文件头部写入header('Access-Control-Allow-Origin:http://a.com:8080'),表示允许来自源http://a.com:8080的请求。这是跨域AJAX请求的根本解决方法。相比JSONP只能发GET请求，CORS允许任何类型的请求。但是IE10及以下IE版本不支持。
4.	HTML5 postMessage
这是HTML5的新功能，用postMessage支持基于web的实时消息传递。
5.	利用iframe和location.hash
这个方法比较绕，原理是利用location.hash来传值。url中#号及其后面的内容就是location.hash,改变hash的值页面并不会刷新，所以可以利用hash值来进行数据传递。
这种方法缺点也很多，诸如数据直接暴露在了url中，数据容量和类型都有限等。
6.	利用window.name
主要利用window.name值不随url改变而改变，只要当前页面没被关闭，window.name的值就不会改变。

四 补充&扩展

iframe限制

可以访问同域资源, 可读写;
访问跨域页面时, 只读.

Ajax限制
Ajax 的限制比 iframe 限制更严.

同域资源可读写;
跨域请求会直接被浏览器拦截.(chrome下跨域请求不会发起, 其他浏览器一般是可发送跨域请求, 但响应被浏览器拦截)

Script限制
script并无跨域限制, 这是因为script标签引入的文件不能够被客户端的 js 获取到, 不会影响到原页面的安全, 
因此script标签引入的文件没必要遵循浏览器的同源策略. 相反, ajax 加载的文件内容可被客户端 js 获取到, 引入的文件内容可能会泄漏或者影响原页面安全, 
故, ajax必须遵循同源策略.

